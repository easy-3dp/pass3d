const P:[u8;512] = [
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149,
    56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76,
    132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223,
    183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162,
    241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,

    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149,
    56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76,
    132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223,
    183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162,
    241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,
];




pub(crate) struct Perlin {
	pub(crate) _seedValue: f64,
}

impl Perlin {
	pub fn new(seed: i32) -> Self {
		Self {
			_seedValue: Perlin::XorShift(seed) as f64
		}
	}

    pub fn Noise(&self, a:f64,  b:f64,  c:f64) -> f64
    {
        let mut x = a + self._seedValue;
        let mut y = b + self._seedValue;
        let mut z = c + self._seedValue;

        let X = (x.floor() as i32 & 255) as usize;
        let Y = (y.floor() as i32 & 255) as usize;
        let Z = (z.floor() as i32 & 255) as usize;

        x -= x.floor();
        y -= y.floor();
        z -= z.floor();

        let u = Perlin::Fade(x);
        let v = Perlin::Fade(y);
        let w = Perlin::Fade(z);

        let A  = P[X    ] as usize + Y;
        let AA = P[A    ] as usize + Z;
        let AB = P[A + 1] as usize + Z;
        let B  = P[X + 1] as usize + Y;
        let BA = P[B    ] as usize + Z;
        let BB = P[B + 1] as usize + Z;

        Perlin::Lerp(
            w,
            Perlin::Lerp(v, Perlin::Lerp(u, Perlin::Grad(P[AA    ], x, y, z         ), Perlin::Grad(P[BA    ], x - 1.0, y, z        )), Perlin::Lerp(u, Perlin::Grad(P[AB    ], x, y - 1.0, z        ), Perlin::Grad(P[BB    ], x - 1.0, y - 1.0, z        ))),
            Perlin::Lerp(v, Perlin::Lerp(u, Perlin::Grad(P[AA + 1], x, y, z - 1.0), Perlin::Grad(P[BA + 1], x - 1.0, y, z - 1.0)), Perlin::Lerp(u, Perlin::Grad(P[AB + 1], x, y - 1.0, z - 1.0), Perlin::Grad(P[BB + 1], x - 1.0, y - 1.0, z - 1.0)))
        )
    }

    fn XorShift(value:i32) -> i32 {
        let mut x = value ^ (value >> 12);
        x = x ^ (x << 25);
        x = x ^ (x >> 27);
        x * 2
    }
    
    fn Lerp( t:f64,  a:f64,  b:f64) -> f64
    {
        return a + t * (b - a);
    }
    
    fn Fade( t:f64) -> f64
    {
        return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
    }
    
    fn Grad( hash:u8,  x:f64,  y:f64,  z:f64) -> f64
    {
        let h = hash & 15;
        let u = if h < 8 { x } else { y };
        let v = if h < 4 { y } else { if h == 12 || h == 14 { x } else { z } };
        return (if (h & 1) == 0 { u } else { -u }) + (if (h & 2) == 0 { v } else { -v });
    }
}